from os.path import join
import pandas as pd
from collections import defaultdict
import yaml
import csv

###############################################################
# set snakemake config params
###############################################################
# dir paths

# manifests

# to use with advanced rules
with open(join(out_dir,'config','cluster_config.yaml')) as file:
    CLUSTER = yaml.load(file, Loader=yaml.FullLoader)
getthreads=lambda rname:int(CLUSTER[rname]["threads"]) if rname in CLUSTER and "threads" in CLUSTER[rname] else int(CLUSTER["__default__"]["threads"])

###############################################################
# create sample lists
###############################################################
#dict sample_id: filename
def CreateSampleDicts(df_s):

    return(fq_dict,bam_dict)

#create lists of sample ids, filenames
def CreateProjLists(dict_f,dict_b):

    return(sp_list,fq_list,bam_list)

###############################################################
# snakemake functions
###############################################################
#get list of fq names based on multiplex name
def get_input_files(wildcards):

    return(fq)

def get_rulec_cmd(wildcards):

    return(cmd)

def get_ruled_cmd(wildcards):

    return(cmd)
###############################################################
# main code
###############################################################
#read manifests
df_samples = pd.read_csv(sample_manifest,sep=",")

#create dicts
(fastq_dict,bam_dict) = CreateSampleDicts(df_samples)

#create unique sample_id and fq_list
#sp_list    fqname          bamname
#sample_1    sample_1.fq    sample_1.bam
#sample_2    sample_2.fq    sample_2.bam
(sp_list,fq_list,bam_list) = CreateProjLists(fastq_dict,bam_dict)

# specify local rules

# specify rule_all
rule all:
    input:
        # input files

        # ruleA output
 
        # ruleB output

        # ruleC output

        # ruleD output
        
        # ruleE output


# rule A:
#     input:
#     output:
#     shell:


# rule B:
#     input:
#     output:
#     shell:

# rule C:
#     input:
#     params:
#     output:
#     shell:


# rule D:
#     input:
#     params:
#     output:
#     shell:

#rule E:
#     input:
#     params:
#     envmodules:
#     threads:
#     output:
#     shell: